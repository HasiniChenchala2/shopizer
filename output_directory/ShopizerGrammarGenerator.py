# Generated by Grammarinator 23.7

import itertools

from math import inf
from grammarinator.runtime import *

class ShopizerGrammarGenerator(Generator):


    def EOF(self, parent=None):
        pass
    EOF.min_depth = 0

    def start(self, parent=None):
        with RuleContext(self, UnparserRule(name='start', parent=parent)) as current:
            with AlternationContext(self, [4, 4, 4, 4], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.get, self.post, self.put, self.delete][choice0](parent=current)
            self.EOF(parent=current)
            return current
    start.min_depth = 4

    def get(self, parent=None):
        with RuleContext(self, UnparserRule(name='get', parent=parent)) as current:
            with AlternationContext(self, [3, 3, 3, 3, 3], [1, 1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.getCatalog, self.getManufacturer, self.getCategoryByProduct, self.getAllCategories, self.getCustomerReviews][choice0](parent=current)
            return current
    get.min_depth = 3

    def post(self, parent=None):
        with RuleContext(self, UnparserRule(name='post', parent=parent)) as current:
            with AlternationContext(self, [3, 3, 3, 3], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.postCatalog, self.postContact, self.postCart, self.postCustomerLogin][choice0](parent=current)
            return current
    post.min_depth = 3

    def put(self, parent=None):
        with RuleContext(self, UnparserRule(name='put', parent=parent)) as current:
            with AlternationContext(self, [3, 3], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.patchCatalog, self.putManufacturer][choice0](parent=current)
            return current
    put.min_depth = 3

    def delete(self, parent=None):
        with RuleContext(self, UnparserRule(name='delete', parent=parent)) as current:
            with AlternationContext(self, [3, 3, 3, 3], [1, 1, 1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                [self.deleteCatalog, self.deleteCategory, self.deleteCart, self.deleteCustomer][choice0](parent=current)
            return current
    delete.min_depth = 3

    def getCatalog(self, parent=None):
        with RuleContext(self, UnparserRule(name='getCatalog', parent=parent)) as current:
            UnlexerRule(src='{ "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    getCatalog.min_depth = 2

    def getManufacturer(self, parent=None):
        with RuleContext(self, UnparserRule(name='getManufacturer', parent=parent)) as current:
            UnlexerRule(src='{ "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    getManufacturer.min_depth = 2

    def getCategoryByProduct(self, parent=None):
        with RuleContext(self, UnparserRule(name='getCategoryByProduct', parent=parent)) as current:
            UnlexerRule(src='{ "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    getCategoryByProduct.min_depth = 2

    def getAllCategories(self, parent=None):
        with RuleContext(self, UnparserRule(name='getAllCategories', parent=parent)) as current:
            UnlexerRule(src='{ "count": ', parent=current)
            self.count(parent=current)
            UnlexerRule(src=', "page": ', parent=current)
            self.page(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    getAllCategories.min_depth = 2

    def getCustomerReviews(self, parent=None):
        with RuleContext(self, UnparserRule(name='getCustomerReviews', parent=parent)) as current:
            UnlexerRule(src='{ "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    getCustomerReviews.min_depth = 2

    def postCatalog(self, parent=None):
        with RuleContext(self, UnparserRule(name='postCatalog', parent=parent)) as current:
            UnlexerRule(src='{ "code": ', parent=current)
            self.codeValue(parent=current)
            UnlexerRule(src=', "defaultCatalog": ', parent=current)
            self.booleanValue(parent=current)
            UnlexerRule(src=', "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=', "visible": ', parent=current)
            self.booleanValue(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    postCatalog.min_depth = 2

    def postContact(self, parent=None):
        with RuleContext(self, UnparserRule(name='postContact', parent=parent)) as current:
            UnlexerRule(src='{ "comment": ', parent=current)
            self.commentValue(parent=current)
            UnlexerRule(src=', "email": ', parent=current)
            self.emailValue(parent=current)
            UnlexerRule(src=', "name": ', parent=current)
            self.nameValue(parent=current)
            UnlexerRule(src=', "subject": ', parent=current)
            self.subjectValue(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    postContact.min_depth = 2

    def postCart(self, parent=None):
        with RuleContext(self, UnparserRule(name='postCart', parent=parent)) as current:
            UnlexerRule(src='{ "attributes": [{ "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=' }], "product": ', parent=current)
            self.productValue(parent=current)
            UnlexerRule(src=', "promoCode": ', parent=current)
            self.promoCodeValue(parent=current)
            UnlexerRule(src=', "quantity": ', parent=current)
            self.quantity(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    postCart.min_depth = 2

    def postCustomerLogin(self, parent=None):
        with RuleContext(self, UnparserRule(name='postCustomerLogin', parent=parent)) as current:
            UnlexerRule(src='{ "password": ', parent=current)
            self.passwordValue(parent=current)
            UnlexerRule(src=', "username": ', parent=current)
            self.usernameValue(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    postCustomerLogin.min_depth = 2

    def patchCatalog(self, parent=None):
        with RuleContext(self, UnparserRule(name='patchCatalog', parent=parent)) as current:
            UnlexerRule(src='{ "code": ', parent=current)
            self.codeValue(parent=current)
            UnlexerRule(src=', "defaultCatalog": ', parent=current)
            self.booleanValue(parent=current)
            UnlexerRule(src=', "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=', "visible": ', parent=current)
            self.booleanValue(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    patchCatalog.min_depth = 2

    def putManufacturer(self, parent=None):
        with RuleContext(self, UnparserRule(name='putManufacturer', parent=parent)) as current:
            UnlexerRule(src='{ "code": ', parent=current)
            self.codeValue(parent=current)
            UnlexerRule(src=', "descriptions": [{ "description": ', parent=current)
            self.descriptionValue(parent=current)
            UnlexerRule(src=', "friendlyUrl": ', parent=current)
            self.friendlyUrlValue(parent=current)
            UnlexerRule(src=', "highlights": ', parent=current)
            self.highlightsValue(parent=current)
            UnlexerRule(src=', "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=', "keyWords": ', parent=current)
            self.keyWordsValue(parent=current)
            UnlexerRule(src=', "language": ', parent=current)
            self.languageValue(parent=current)
            UnlexerRule(src=', "metaDescription": ', parent=current)
            self.metaDescriptionValue(parent=current)
            UnlexerRule(src=', "name": ', parent=current)
            self.nameValue(parent=current)
            UnlexerRule(src=', "title": ', parent=current)
            self.titleValue(parent=current)
            UnlexerRule(src='}], "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=', "order": ', parent=current)
            self.orderValue(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    putManufacturer.min_depth = 2

    def deleteCatalog(self, parent=None):
        with RuleContext(self, UnparserRule(name='deleteCatalog', parent=parent)) as current:
            UnlexerRule(src='{ "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    deleteCatalog.min_depth = 2

    def deleteCategory(self, parent=None):
        with RuleContext(self, UnparserRule(name='deleteCategory', parent=parent)) as current:
            UnlexerRule(src='{ "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    deleteCategory.min_depth = 2

    def deleteCart(self, parent=None):
        with RuleContext(self, UnparserRule(name='deleteCart', parent=parent)) as current:
            UnlexerRule(src='{ "code": ', parent=current)
            self.codeValue(parent=current)
            UnlexerRule(src=', "sku": ', parent=current)
            self.skuValue(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    deleteCart.min_depth = 2

    def deleteCustomer(self, parent=None):
        with RuleContext(self, UnparserRule(name='deleteCustomer', parent=parent)) as current:
            UnlexerRule(src='{ "id": ', parent=current)
            self.id(parent=current)
            UnlexerRule(src=' }', parent=current)
            return current
    deleteCustomer.min_depth = 2

    def codeValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='codeValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    codeValue.min_depth = 1

    def skuValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='skuValue', parent=parent)) as current:
            self.INTEGER_LITERAL(parent=current)
            return current
    skuValue.min_depth = 1

    def quantity(self, parent=None):
        with RuleContext(self, UnparserRule(name='quantity', parent=parent)) as current:
            self.INTEGER_LITERAL(parent=current)
            return current
    quantity.min_depth = 1

    def id(self, parent=None):
        with RuleContext(self, UnparserRule(name='id', parent=parent)) as current:
            self.INTEGER_LITERAL(parent=current)
            return current
    id.min_depth = 1

    def booleanValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='booleanValue', parent=parent)) as current:
            with AlternationContext(self, [0, 0], [1, 1]) as weights0:
                choice0 = self._model.choice(current, 0, weights0)
                UnlexerRule(src=['true', 'false'][choice0], parent=current)
            return current
    booleanValue.min_depth = 0

    def commentValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='commentValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    commentValue.min_depth = 1

    def emailValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='emailValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    emailValue.min_depth = 1

    def nameValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='nameValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    nameValue.min_depth = 1

    def usernameValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='usernameValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    usernameValue.min_depth = 1

    def subjectValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='subjectValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    subjectValue.min_depth = 1

    def descriptionValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='descriptionValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    descriptionValue.min_depth = 1

    def friendlyUrlValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='friendlyUrlValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    friendlyUrlValue.min_depth = 1

    def highlightsValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='highlightsValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    highlightsValue.min_depth = 1

    def keyWordsValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='keyWordsValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    keyWordsValue.min_depth = 1

    def languageValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='languageValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    languageValue.min_depth = 1

    def passwordValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='passwordValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    passwordValue.min_depth = 1

    def promoCodeValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='promoCodeValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    promoCodeValue.min_depth = 1

    def metaDescriptionValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='metaDescriptionValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    metaDescriptionValue.min_depth = 1

    def titleValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='titleValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    titleValue.min_depth = 1

    def productValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='productValue', parent=parent)) as current:
            self.STRING_LITERAL(parent=current)
            return current
    productValue.min_depth = 1

    def orderValue(self, parent=None):
        with RuleContext(self, UnparserRule(name='orderValue', parent=parent)) as current:
            self.INTEGER_LITERAL(parent=current)
            return current
    orderValue.min_depth = 1

    def count(self, parent=None):
        with RuleContext(self, UnparserRule(name='count', parent=parent)) as current:
            self.INTEGER_LITERAL(parent=current)
            return current
    count.min_depth = 1

    def page(self, parent=None):
        with RuleContext(self, UnparserRule(name='page', parent=parent)) as current:
            self.INTEGER_LITERAL(parent=current)
            return current
    page.min_depth = 1

    def STRING_LITERAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='STRING_LITERAL', parent=parent)) as current:
            UnlexerRule(src='"', parent=current)
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=0, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[1]), parent=current)
            UnlexerRule(src='"', parent=current)
            return current
    STRING_LITERAL.min_depth = 0

    def INTEGER_LITERAL(self, parent=None):
        with RuleContext(self, UnlexerRule(name='INTEGER_LITERAL', parent=parent)) as current:
            if self._max_depth >= 0:
                for _ in self._model.quantify(current, 0, min=1, max=inf):
                    UnlexerRule(src=self._model.charset(current, 0, self._charsets[2]), parent=current)
            return current
    INTEGER_LITERAL.min_depth = 0

    _default_rule = start

    _charsets = {
        0: list(itertools.chain.from_iterable([range(32, 127)])),
        1: list(itertools.chain.from_iterable([range(32, 34), range(35, 127)])),
        2: list(itertools.chain.from_iterable([range(48, 58)])),
    }
